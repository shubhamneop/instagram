{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USERS_LIKES_STATE_CHANGE } from \"../constants/index\";\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"does not exist\");\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        console.log(following[i]);\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n    console.log(\"in fetchUsersData\", {\n      uid: uid,\n      getPosts: getPosts\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log(\"does not exist\");\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUserFollowingPosts(uid));\n      }\n    } else {\n      console.log(\"in else\");\n    }\n  };\n}\nexport function fetchUserFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUserFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUserFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/var/www/html/react-native/instagram/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","CLEAR_DATA","USERS_LIKES_STATE_CHANGE","firebase","require","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUserFollowingPosts","query","EP","path","segments","find","fetchUserFollowingLikes","postId","ZE","currentUserLike"],"mappings":"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","sourcesContent":["import {\n  USER_STATE_CHANGE,\n  USER_POSTS_STATE_CHANGE,\n  USER_FOLLOWING_STATE_CHANGE,\n  USERS_DATA_STATE_CHANGE,\n  USERS_POSTS_STATE_CHANGE,\n  CLEAR_DATA,\n  USERS_LIKES_STATE_CHANGE,\n} from \"../constants/index\";\nimport firebase from \"firebase\";\nrequire(\"firebase/firestore\");\n\nexport function clearData() {\n  return (dispatch) => {\n    dispatch({ type: CLEAR_DATA });\n  };\n}\n\nexport function fetchUser() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"users\")\n      .doc(firebase.auth().currentUser.uid)\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists) {\n          dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() });\n        } else {\n          console.log(\"does not exist\");\n        }\n      });\n  };\n}\n\nexport function fetchUserPosts() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(firebase.auth().currentUser.uid)\n      .collection(\"userPosts\")\n      .orderBy(\"creation\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        let posts = snapshot.docs.map((doc) => {\n          const data = doc.data();\n          const id = doc.id;\n          return { id, ...data };\n        });\n        dispatch({ type: USER_POSTS_STATE_CHANGE, posts });\n      });\n  };\n}\n\nexport function fetchUserFollowing() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"following\")\n      .doc(firebase.auth().currentUser.uid)\n      .collection(\"userFollowing\")\n      .onSnapshot((snapshot) => {\n        let following = snapshot.docs.map((doc) => {\n          const id = doc.id;\n          return id;\n        });\n        dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n        for (let i = 0; i < following.length; i++) {\n          console.log(following[i]);\n          dispatch(fetchUsersData(following[i], true));\n        }\n      });\n  };\n}\n\nexport function fetchUsersData(uid, getPosts) {\n  return (dispatch, getState) => {\n    const found = getState().usersState.users.some((el) => el.uid === uid);\n    console.log(\"in fetchUsersData\", { uid, getPosts });\n    if (!found) {\n      firebase\n        .firestore()\n        .collection(\"users\")\n        .doc(uid)\n        .get()\n        .then((snapshot) => {\n          if (snapshot.exists) {\n            let user = snapshot.data();\n            user.uid = snapshot.id;\n            dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n          } else {\n            console.log(\"does not exist\");\n          }\n        });\n      if (getPosts) {\n        dispatch(fetchUserFollowingPosts(uid));\n      }\n    } else {\n      console.log(\"in else\");\n    }\n  };\n}\n\nexport function fetchUserFollowingPosts(uid) {\n  return (dispatch, getState) => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(uid)\n      .collection(\"userPosts\")\n      .orderBy(\"creation\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        const uid = snapshot.query.EP.path.segments[1];\n\n        const user = getState().usersState.users.find((el) => el.uid === uid);\n\n        let posts = snapshot.docs.map((doc) => {\n          const data = doc.data();\n          const id = doc.id;\n          return { id, ...data, user };\n        });\n\n        for (let i = 0; i < posts.length; i++) {\n          dispatch(fetchUserFollowingLikes(uid, posts[i].id));\n        }\n\n        dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid });\n      });\n  };\n}\n\nexport function fetchUserFollowingLikes(uid, postId) {\n  return (dispatch, getState) => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(uid)\n      .collection(\"userPosts\")\n      .doc(postId)\n      .collection(\"likes\")\n      .doc(firebase.auth().currentUser.uid)\n      .onSnapshot((snapshot) => {\n        const postId = snapshot.ZE.path.segments[3];\n        let currentUserLike = false;\n        if (snapshot.exists) {\n          currentUserLike = true;\n        }\n        dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike });\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}